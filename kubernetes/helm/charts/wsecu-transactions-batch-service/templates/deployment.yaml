apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "app.fullname" . }}
  labels:
    app: {{ template "app.name" . }}
    chart: {{ template "app.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app: {{ template "app.name" . }}
      release: {{ .Release.Name }}
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: {{ template "app.name" . }}
        release: {{ .Release.Name }}
    spec:
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - preference:
                matchExpressions:
                  - key: cpu_worker
                    operator: In
                    values:
                      - "true"
              weight: 100
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.dockerRegistry }}/dbp/{{ .Chart.Name }}:{{ .Values.version }}"
          imagePullPolicy: IfNotPresent
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: jvm-debug
              containerPort: 5009
              protocol: TCP
            - name: jmx
              containerPort: 8686
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            failureThreshold: 16
            timeoutSeconds: 15
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            failureThreshold: 16
            timeoutSeconds: 15
            periodSeconds: 20
          envFrom:
            - configMapRef:
                name: spring-environment
          env:
            - name: _JAVA_OPTIONS
              value: -Xmx4g
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          volumeMounts:
            - name: setenv-volume
              mountPath: /usr/local/tomcat/bin/setenv.sh
              subPath: setenv.sh
          resources:
            requests:
              memory: "4000Mi"
              cpu: "2000m"

      volumes:
        - name: setenv-volume
          configMap:
            name: setenv-{{ .Release.Namespace }}
